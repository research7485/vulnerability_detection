import google.generativeai as palm
import os
import sys
import csv

def main():
    model_id = 'models/text-bison-001'
    palm.configure(api_key=os.environ['google_key'])
    
    output_file = 'palm_descriptions_for_big_vul.csv'

    data = get_methods('dfBigVulFinal.csv') # List of dictionaries
    leftover = leftover_func('leftover.csv')
    done = already_done(output_file)
    
    
    with open(output_file, 'a', newline='') as f:
        with open('new_leftover.csv', 'w', newline='') as f_alt:
            writer = csv.DictWriter(f, fieldnames=['Index', 'CWE_ID', 'Palm_Description'])
            #writer.writeheader()
            writer_alt = csv.DictWriter(f_alt, fieldnames=['Index', 'Msg'])
            writer_alt.writeheader()
            
            count = 0
            # For each cwe
            for row in data:
                if row['Index'] in leftover and row['Index'] not in done:
                    print(row['Index'])
                    try:
                        question = 'Give me a rundown of this function.'
                        prompt =  question + ": " + row['func']
                        response = palm.generate_text(model=model_id, prompt=prompt, temperature=0)
                        record = {'Index': row['Index'],
                                'CWE_ID': row['CWE_ID'],
                                'Palm_Description': response.candidates[0]['output']}
                        writer.writerow(record)
                    except Exception as e:
                        #print(f"Skipping row with idx {row['Index']} due to error: {e}")
                        msg = f'{e}'
                        record = {
                            'Index': row['Index'],
                            'Msg': msg
                        }
                        
                        writer_alt.writerow(record)
                    count += 1
                        
                
                
            
def already_done(file):
    done = []
    with open(file) as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            cwe = row['Index']
            done.append(cwe)
            
    return done

def leftover_func(file):
    done = []
    with open(file) as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            cwe = row['Index']
            done.append(cwe)
            
    return done
    
    
def check():
    data = get_methods('dfBigVulFinal.csv')
    print(len(data))
    
def check1():
    done = already_done('palm_descriptions_for_big_vul.csv')
    print(done[-1])
        
        
def get_methods(file_name):
    data = []  
    
    with open(file_name, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['CWE ID'] != '':
                temp = {}
                temp['Index'] = row['\ufeffIdx']
                temp['CWE_ID'] = row['CWE ID']
                temp['func'] = row['func']
                data.append(temp)
                            
    return data
                        
              
    
if __name__  == '__main__':
    main()
    
