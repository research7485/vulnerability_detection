import xml.etree.ElementTree as ET


# Read the XML data from the file
with open("cwec_v4.12.xml", "r", encoding="utf-8") as file:
    xml_data = file.read()

# Parse the XML data
root = ET.fromstring(xml_data)

# Define the namespace
namespace = {"cwe": "http://cwe.mitre.org/cwe-7"}

#count = 0

# Iterate through each Weakness element
'''for weakness in root.findall(".//cwe:Weakness", namespace):
    weakness_name = weakness.get("Name")
    print("Weakness Name:", weakness_name)

    related_weaknesses = weakness.findall(".//cwe:Related_Weaknesses/cwe:Related_Weakness", namespace)
    for related_weakness in related_weaknesses:
        related_cwe_id = related_weakness.get("CWE_ID")
        relation_name = related_weakness.get('Nature')
        print("Related CWE_ID:", related_cwe_id, relation_name)
        
    count += 1
    
    print()
    
print(count)'''
def main():
    print(get_relation(200, 213))

# This function take two id. It checks all the relations of id1. If id2 is in any of the relation, then it return the name of the relation else return None
def get_relation(id1: int, id2: int):
    for weakness in root.findall(".//cwe:Weakness", namespace):
        weakness_id = int(weakness.get("ID"))

        # If the id is desired ID
        if (weakness_id == id1):
            # Look through its relations
            related_weaknesses = weakness.findall(".//cwe:Related_Weaknesses/cwe:Related_Weakness", namespace)
            for related_weakness in related_weaknesses:
                related_cwe_id = int(related_weakness.get("CWE_ID"))
                relation_name = related_weakness.get('Nature')
                
                if related_cwe_id == id2:
                    return relation_name
            
            
    return None

# Takes two id. For all the parent of id1, it check if that cwe that any relation with id2 named as "ParentOf". If yes, then return true else false
def are_siblings(id1, id2):

    for weakness in root.findall(".//cwe:Weakness", namespace):
        weakness_id = int(weakness.get("ID"))

        # If the id is desired ID
        if (weakness_id == id1):
            # Look through its relations
            related_weaknesses = weakness.findall(".//cwe:Related_Weaknesses/cwe:Related_Weakness", namespace)
            for related_weakness in related_weaknesses:
                related_cwe_id = int(related_weakness.get("CWE_ID"))
                relation_name = related_weakness.get('Nature')
                
                if relation_name == 'ChildOf':
                    
                    # Check all the relation of this parent
                    if are_siblings_supplement(related_cwe_id, id2):
                        return True
    return False

# Check if parent has a relation with id2 names: "ParentOf"
def are_siblings_supplement(parent, id2):
    for weakness in root.findall(".//cwe:Weakness", namespace):
        weakness_id = int(weakness.get("ID"))

        # If the id is desired ID
        if (weakness_id == parent):
            # Look through its relations
            related_weaknesses = weakness.findall(".//cwe:Related_Weaknesses/cwe:Related_Weakness", namespace)
            for related_weakness in related_weaknesses:
                related_cwe_id = int(related_weakness.get("CWE_ID"))
                relation_name = related_weakness.get('Nature')
                
                if related_cwe_id == id2 and relation_name == 'ParentOf':
                    return True
    return False




if __name__ == '__main__':
    main()
