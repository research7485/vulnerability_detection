import csv

def is_vulnerable(palm_output):
    
    '''Get response for palm_vulnerable column of output file i.e. interprets LLM output'''
    
    palm_output = palm_output.lower()  # Convert to lowercase for case-insensitive comparison
   
    if "is not vulnerable" in palm_output or "appears to be non-vulnerable" in palm_output or "does not appear to be vulnerable" in palm_output:
        return 'False'
    elif "yes" in palm_output or "is vulnerable" in palm_output or "does not validate" in palm_output or "does not check" in palm_output or "function does not perform" in palm_output or "could be a security issue" in palm_output or "may be vulnerable" in palm_output or "is associated with" in palm_output or "is potentially vulnerable to" in palm_output:
        return 'True'
    elif "no" in palm_output:
        return 'False'

data = []
fieldnames = []
with open('1_out.csv', 'r') as f:
    reader = csv.DictReader(f)
    fieldnames = reader.fieldnames
    for row in reader:
        data.append(row)
        
fieldnames.append('Palm_Vulnerable')

with open('output/2_out.csv', 'w') as f:
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()
    for row in data:
        row['Palm_Vulnerable'] = is_vulnerable(row['Palm_Output'])
        
        writer.writerow(row)
              