import csv
import os
import google.generativeai as genai
import sys
import time
import random
import descriptions_with_ids

def read_functions(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            row.append(x)
    return row

data = read_functions('dfBigVulFinal.csv') # Is a list of dictionaries (only using this to get vulnerable column data)
ranking_data = read_functions('big_vul_score_98_10.csv')  # we are not using palm descripiton in the data
print(len(ranking_data))
length_of_data = len(data)  # length of list. i.e. length of rows
id_descriptions = descriptions_with_ids.mitre_descriptions # This is reference to the list of dictionaries object in descriptions.py


def main():
    print(len(data))
    genai.configure(api_key=os.environ['API_KEY'])
    model = genai.GenerativeModel('gemini-pro')
 
    count = 0
    with open('output/1_out.csv', 'w') as f:
        writer = csv.DictWriter(f, fieldnames=['Index', 'CWE', 'func', 'Vulnerable', 'Palm_Output', 'Prompt'])
        writer.writeheader()
    
         # For each cwe
        request_count = 0
        start_time = time.time()
        
        # Go through all the ranking data
        for x in range(len(ranking_data)):
            
    
            # get cwe and folder for the current row
            CWE = ranking_data[x]['Cwe']
            Index = ranking_data[x]['Index']
            
            func = ''
            # Get func from the big data
            for y in data:
                if Index == y['\ufeffIdx']:
                    func = y['func']
                    break
              
            
            Vulnerable = ranking_data[x]['Vulnerable']
            
            # Check if 90 requests have been sent in the current minute
            if request_count >= 55:
                # Wait until the next minute starts
                current_time = time.time()
                time_to_sleep = 60 - (current_time - start_time)
                # Ensure time_to_sleep is non-negative
                if time_to_sleep < 0:
                    time_to_sleep = 0
                time.sleep(time_to_sleep)

                # Reset the request count and start time
                request_count = 0
                start_time = time.time()
            
            try:
                
            
                prompt = prompt_gen(func, x, CWE)
                #print(prompt)
            
                
                response = model.generate_content(prompt)
                record = {'CWE': CWE,
                        'Index': Index,
                        'func': func,
                        'Vulnerable': Vulnerable,
                        'Palm_Output': response.text,
                        'Prompt': prompt}
                writer.writerow(record)
                print(Index)
        
            except Exception as e:
                log(f"Skipping Index {Index} and {CWE} due to error: {e}")
              

# input CWE e.g. CWE-89
def random_false_cwe_gen(actual_cwe): 
    random_number = random.randrange(0, length_of_data - 1)

    while True:
    
        cwe_id = data[random_number]['CWE ID'].strip()
        
        # Check cwe_id
        if cwe_id == '':
            random_number = random.randrange(0, length_of_data - 1)
            continue
        
        cwe_desc = cwe_to_desc(cwe_id)
        
        
        if cwe_desc is not None and actual_cwe != cwe_id:
            break 
        
        random_number = random.randrange(0, length_of_data - 1)
      
    
    return cwe_id, cwe_desc
    
# e.g. CWE-69, cwe-69...
def cwe_to_desc(cwe_id):
    #print(cwe_id)
    _, id = cwe_id.split('-')
    for x in range(len(id_descriptions)):
        if id_descriptions[x]['id'] == id:
            return id_descriptions[x]['description']
    
def prompt_gen(func, index_of_func, CWE):
    if ranking_data[index_of_func]['Id_of_description_1'] == '':
        return "Is the function below vulnerable to any Common Weakness Enumerations (CWEs)? Here is the function: \n" + func
    
    a = ''
    b= ''
    c = ''
    count = 0
    prompt = "Here are few Common Weakness Enumerations (CWEs). Take a look at them first, and then I will ask you a question.\n"
    for i in range(10):
        if ranking_data[index_of_func]['Id_of_description_' + str(i+1)] != '':
            prompt += "CWE-" + ranking_data[index_of_func]['Id_of_description_' + str(i+1)] + " has the description: " + cwe_to_desc('cwe-' + ranking_data[index_of_func]['Id_of_description_' + str(i+1)])
            prompt += "\n"
            count += 1
    prompt += "\nIs the following function vulnerable to any of these or any other CWE? \n" + func
    #print(ranking_data[index_of_func]['Index'], a, b, c)
    return prompt
        
def log(message):
    with open('failures.txt', 'a') as f:
        f.write(message + '\n')
        print(message)
    
if __name__ == "__main__":
    main()
    #print(prompt_gen(data[0]['func'], 0), "ok")