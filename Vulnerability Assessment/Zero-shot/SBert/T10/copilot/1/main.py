import csv
import os
import google.generativeai as palm
import sys
import time
import random
import descriptions_with_ids

def read_functions(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            row.append(x)
    return row

data = read_functions('copilot_functions.csv') # Is a list of dictionaries (only using this to get vulnerable column data)
ranking_data = read_functions('copilot_score_98_10.csv')  # we are not using palm descripiton in the data
print(len(ranking_data))
length_of_data = len(data)  # length of list. i.e. length of rows
id_descriptions = descriptions_with_ids.mitre_descriptions # This is reference to the list of dictionaries object in descriptions.py


def main():
    print(len(data))
    model_id = 'models/text-bison-001'
    palm.configure(api_key=os.environ['google_key'])
 
    count = 0
    with open('output/1_out.csv', 'w') as f:
        writer = csv.DictWriter(f, fieldnames=['CWE', 'Folder', 'func', 'Palm_Output'])
        writer.writeheader()
    
         # For each cwe
        request_count = 0
        start_time = time.time()
        
        # Go through all the ranking data
        for x in range(len(ranking_data)):
            
    
            # get cwe and folder for the current row
            CWE = ranking_data[x]['Cwe']
            Folder = ranking_data[x]['Folder']
            
            func = ''
            # Get func from the big data
            for y in data:
                if CWE.lower() == y['CWE'].lower() and Folder == y['Folder']:
                    func = y['func']
                    break
              
            
            
            # Check if 90 requests have been sent in the current minute
            if request_count >= 85:
                # Wait until the next minute starts
                current_time = time.time()
                time_to_sleep = 60 - (current_time - start_time)
                # Ensure time_to_sleep is non-negative
                if time_to_sleep < 0:
                    time_to_sleep = 0
                time.sleep(time_to_sleep)

                # Reset the request count and start time
                request_count = 0
                start_time = time.time()
            
            try:
                
            
                prompt = prompt_gen(func, x)
                #print(prompt)
            
                
                response = palm.generate_text(model=model_id, prompt=prompt, temperature=0)
                record = {'CWE': CWE,
                        'Folder': Folder,
                        'func': func,
                        'Palm_Output': response.candidates[0]['output']
                        }
                writer.writerow(record)
                print(CWE, Folder)
        
            except Exception as e:
                log(f"Skipping {CWE} {Folder} due to error: {e}")
              
    
# e.g. CWE-69, cwe-69...
def cwe_to_desc(cwe_id):
    print(cwe_id)
    _, id = cwe_id.split('-')
    for x in range(len(id_descriptions)):
        if id_descriptions[x]['id'] == id:
            return id_descriptions[x]['description']
    
def prompt_gen(func, index_of_func):
    if ranking_data[index_of_func]['Id_of_description_1'] == '':
        return "Is the function below vulnerable to any Common Weakness Enumerations (CWEs)? Here is the function: \n" + func
    
    a = ''
    b= ''
    c = ''
    prompt = "Is the function below vulnerable to the following Common Weakness Enumerations (CWEs)? Here is the function: \n" + func + " \n Here are CWES: \n"
    for i in range(10):
        if ranking_data[index_of_func]['Id_of_description_' + str(i+1)] != '':
            prompt += 'CWE-' + ranking_data[index_of_func]['Id_of_description_' + str(i+1)] + " is " + ranking_data[index_of_func]['Description_from_cwe_website_' + str(i+1)] 
            prompt += "\n"
            
            if i == 0:
                a = ranking_data[index_of_func]['Id_of_description_' + str(i+1)]
            elif i == 1:
                b = ranking_data[index_of_func]['Id_of_description_' + str(i+1)]
            else:
                c = ranking_data[index_of_func]['Id_of_description_' + str(i+1)]
        
    #print(ranking_data[index_of_func]['Index'], a, b, c)
    return prompt
        
        
def log(message):
    with open('failures.txt', 'a') as f:
        f.write(message + '\n')
        print(message)
    
if __name__ == "__main__":
    main()
    #print(prompt_gen(data[0]['func'], 0), "ok")