import google.generativeai as genai
import os
import random
import sys
import csv
import time

def main():
    genai.configure(api_key=os.environ['API_KEY'])
    model = genai.GenerativeModel('gemini-pro')

    data = read_functions('input/dfBigVulFinal.csv') # Is a dictionary of dictionaries
    ranking_data = read_rankings('input/codebert_bigvul_relation_98_top_10.csv')
    bigvul_data = read_bigvul_functions('input/dfBigVulFinal.csv')
    
    output_file = 'output/bigvul_T10_1.csv'
    with open(output_file, 'w', newline='') as f:
        
        writer = csv.DictWriter(f, fieldnames=['Index', 'CWE', 'func', 'Vulnerable', 'Palm_Output', 'Prompt'])
        writer.writeheader()
        
        # For each actual function
        request_count = 0
        start_time = time.time()
        # For each actual function
        for x in range(len(data)):
            
            
            # get cwe and folder for the current row
            CWE = data[x]['CWE ID']
            Index = data[x]['\ufeffIdx']
            func = data[x]['func']
            Vulnerable = data[x]['target']
            
            top_cwe_sbert = []
            #! Find respective t10 closest cwe according to sbert
            for y in range(len(ranking_data)):
                if Index == ranking_data[y]['Index']:
                    
                    for i in range(10):
                        if ranking_data[y]['similar-id-' + str(i+1)] != '':
                            top_cwe_sbert.append('cwe-' + ranking_data[y]['similar-id-' + str(i+1)])
                    
                    # Break when we found and do things with the respective CWE
                    break
            
            
            # Look for examples for each cwe in top_cwe_sbert
            examples =  []
            # Look for respective CWEs in bigvul_data (only taking vulnerable CWEs)
            for y in top_cwe_sbert:            
                for z in range(len(bigvul_data)):
                    if CWE == bigvul_data[z]['CWE ID'].lower():
                        continue
                    if y == bigvul_data[z]['CWE ID'].lower() and bigvul_data[z]['target'] == '1':
                        example = {
                            'CWE': y,
                            'func': bigvul_data[z]['func']
                        }
                        #print(y)
                        examples.append(example)
                        break
                    
                # break out of loop if have already found 3 examples
                
                if len(examples) == 10:
                    break
            #if len(examples) > 0:
            #    print(examples)
            #    break
                  
            while len(examples) < 10:
                #! Search for more example until we have find 3 examples
                random_number = random.randint(8922, 17661)
                # Need to append dictionary
                example = {
                    'CWE': bigvul_data[random_number]['CWE ID'],
                    'func': bigvul_data[random_number]['func']
                }
                examples.append(example)
              
           
            # Add 3 non-vulnerable examples
            while len(examples) < 20:
                random_number = random.randint(0, 8921)
                # Need to append dictionary
                example = {
                    'CWE': '',
                    'func': bigvul_data[random_number]['func']
                }
                examples.append(example)
                
            
            # Check if 90 requests have been sent in the current minute
            if request_count >= 65:
                # Wait until the next minute starts
                current_time = time.time()
                time_to_sleep = 60 - (current_time - start_time)
                # Ensure time_to_sleep is non-negative
                if time_to_sleep < 0:
                    time_to_sleep = 0
                time.sleep(time_to_sleep)

                # Reset the request count and start time
                request_count = 0
                start_time = time.time()
            
            try:
                if len(examples) != 0:
                    prompt = "Here are few examples of vulnerable and non-vulnerable functions. Take a look at them first, and then I will ask you a question."
                    
                    for y in range(10):
                        prompt += examples[y]['CWE']+ " is associated with " + examples[y]['func']
                        prompt += "\n"
                    
                    prompt += "Here are few non-vulnerable functions:\n"
                    for y in range(10, 20):
                        prompt += examples[y]['func']
                        prompt += "\n"
                    # Ask if the function is vulnerable to the example CWE
                    prompt += " Is the upcoming function vulnerable to any of these or any other CWE? " + data[x]['func']
                    
                    
                    response = model.generate_content(prompt)
                    print(Index)
                 
                    
                record = {'CWE': CWE,
                        'Index': Index,
                        'func': func,
                        'Vulnerable': Vulnerable,
                        'Palm_Output': response.text,
                        'Prompt': prompt}
            
                writer.writerow(record)
            except Exception as e:
                log(f"Skipping Index {Index} and {CWE} due to error: {e}")
                
def log(message):
    with open('failures.txt', 'a') as f:
        f.write(message + '\n')
        print(message)
    
def read_functions(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            row.append(x)
            
    return row
        
def read_bigvul_functions(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            row.append(x)
            
    return row

def read_rankings(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            x['Cwe'] = 'cwe-' + x['CWE']
            print(x['Cwe'])
            row.append(x)
            
    return row

if __name__  == '__main__':
    main()