import google.generativeai as genai
import os
import sys
import csv
import time

def main():
    genai.configure(api_key=os.environ['API_KEY'])
    model = genai.GenerativeModel('gemini-pro')

    data = read_functions('input/dfBigVulFinal.csv') # Is a dictionary of dictionaries
    
    output_file = 'output/1_out.csv'
    with open(output_file, 'w', newline='') as f:
        
        writer = csv.DictWriter(f, fieldnames=['Index', 'CWE', 'func', 'Vulnerable', 'Palm_Output'])
        writer.writeheader()
        
         # For each cwe
        request_count = 0
        start_time = time.time()
        for x in range(len(data)):
            
            # get cwe and folder for the current row
            CWE = data[x]['CWE ID']
            Index = data[x]['\ufeffIdx']
            func = data[x]['func']
            Vulnerable = data[x]['target']

            # Check if 90 requests have been sent in the current minute
            if request_count >= 55:
                # Wait until the next minute starts
                current_time = time.time()
                time_to_sleep = 60 - (current_time - start_time)
                # Ensure time_to_sleep is non-negative
                if time_to_sleep < 0:
                    time_to_sleep = 0
                time.sleep(time_to_sleep)

                # Reset the request count and start time
                request_count = 0
                start_time = time.time()

            # Process the current request
            try:
                question = "Is the following function vulnerable to any Common Weakness Enumeratons (CWEs)?"
                prompt =  question + ": " + func
                response = model.generate_content(prompt)
                record = {'CWE': CWE,
                        'Index': Index,
                        'func': func,
                        'Vulnerable': Vulnerable,
                        'Palm_Output': response.text}
                writer.writerow(record)

                # Increment the request count
                request_count += 1
            except Exception as e:
                log(f"Skipping Index {Index} and {CWE} due to error: {e}")
              

    
def read_functions(file):
    row = []
    with open(file, 'r') as f:
        reader = csv.DictReader(f)
        for x in reader:
            row.append(x)
        print(reader.fieldnames)
    return row
        
def log(message):
    with open('failures.txt', 'a') as f:
        f.write(message + '\n')
        print(message)

if __name__  == '__main__':
    main()